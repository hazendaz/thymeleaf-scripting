<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2018-2019 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.scripting.thymeleaf.integrationtest.mapper.XmlNameSqlSessionMapper">

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO names (firstName, lastName)
          VALUES (/*[('#{firstName}')]*/ 'Taro', /*[('#{lastName}')]*/ 'Yamada')
    </insert>

    <update id="update">
      <![CDATA[
        UPDATE names
          SET id = id
          /*[# th:if="${firstName} != null"]*/
            ,firstName = /*[('#{firstName}')]*/ 'Taro'
          /*[/]*/
          /*[# th:if="${lastName} != null"]*/
            ,lastName = /*[('#{lastName}')]*/ 'Yamada'
          /*[/]*/
          WHERE id = /*[('#{id}')]*/ 1
       ]]>
    </update>

    <update id="updateWithEmptyComment">
        UPDATE names
        SET firstName = /*[('#{firstName}')]*/ 'Taro' ,lastName = /*[('#{lastName}')]*/ 'Yamada' /**/ WHERE id = /*[('#{id}')]*/ 1
    </update>

    <delete id="delete">
        DELETE FROM names
          WHERE id = /*[('#{id}')]*/ 1
    </delete>

    <select id="getAllNames" resultType="Name">
        SELECT * FROM names
    </select>

    <select id="findByIdsUsing_include" resultType="Name">
        SELECT * FROM names
        WHERE 1 = 1
        <include refid="inValues" />
        ORDER BY id
    </select>

    <select id="findById_value" resultType="Name">
        SELECT * FROM names
        WHERE 1 = 1
        /*[# th:if="${value} != null"]*/
          AND id = /*[('#{value}')]*/ 1
        /*[/]*/
    </select>

    <select id="findByNameWithEmptyComment" resultType="Name">
        SELECT * FROM names
        WHERE firstName = /*[('#{firstName}')]*/ 'Taro' /**/ AND lastName = /*[('#{lastName}')]*/
    </select>

    <select id="findUsing_parameter" resultType="Name">
        SELECT * FROM names WHERE 1 = 1
        /*[# th:if="${_parameter.id} != null"]*/
            AND id = /*[('#{_parameter.id}')]*/ 1
        /*[/]*/
    </select>

    <select id="findUsingTemplateFile" resultType="Name">
        sql/NameMapper/findById.sql
    </select>

    <sql id="inValues">
        /*[# th:if="${not #lists.isEmpty(list)}"]*/
        AND id IN (
        /*[# th:each="value : ${list}"]*/
          /*[('#{list[' + ${valueStat.index} + ']}')]*/ 1
          /*[(${#mybatis.commaIfNotLast(valueStat)})]*/
        /*[/]*/
        )
        /*[/]*/
    </sql>

    <select id="findDatabaseId" resultType="string" databaseId="hsql">
        SELECT /*[('#{_databaseId}')]*/ 'test db'
          FROM INFORMATION_SCHEMA.SYSTEM_USERS
    </select>

    <select id="findDatabaseId" resultType="string" databaseId="h2">
        SELECT /*[('#{_databaseId}')]*/ 'test db'
    </select>

    <select id="findByName" resultType="Name">
      /*[# mb:bind="patternFirstName=|${firstName}%|, patternLastName=|${lastName}%|" /]*/

      SELECT * FROM names
        WHERE 1 = 1
        /*[# th:if="${firstName} != null"]*/
          AND firstName LIKE /*[('#{patternFirstName}')]*/ 'Taro'
        /*[/]*/
        /*[# th:if="${lastName} != null"]*/
          AND lastName LIKE /*[('#{patternLastName}')]*/ 'Yamada'
        /*[/]*/
    </select>

    <select id="findByNameBindNameIsEmpty" resultType="Name">
      /*[# mb:bind="${''}=1" /]*/
      SELECT * FROM names
    </select>

    <select id="findAllFormSpecifiedTable" resultType="Name">
      SELECT * FROM /*[(${tableNameOfNames} ?: 'names')]*/ foo
    </select>

</mapper>